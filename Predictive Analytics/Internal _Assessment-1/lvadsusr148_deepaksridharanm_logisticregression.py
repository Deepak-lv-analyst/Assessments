# -*- coding: utf-8 -*-
"""LVADSUSR148_DeepakSridharanM_LogisticRegression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MD6-7GiVzshX7HwI_yXoU77bsUiIFGZp
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder,MinMaxScaler
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix

df = pd.read_csv('/content/booking.csv')
df.head()

#1.Handing Missing Values and Outliers
df.isnull().sum()

#univariate analysis
sns.histplot(data=df['room type'])
plt.plot

sns.histplot(data=df['average price'])
plt.plot

if df.isna().sum().sum()>0:
  df.dropna(inplace=True)

if df.duplicated().sum()>0:
  df.drop_duplicates(inplace = True)

numerical_columns=df.select_dtypes(include=['float64','int64']).columns

for column in numerical_columns:
    plt.figure(figsize=(10,6))
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

def detect_and_treat_outliers(df,columns):

  for col in columns:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    #define bounds for outliers
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    #replace outliers with the median of column
    median = df[col].median()
    df[col] = np.where((df[col] < lower_bound) | (df[col] > upper_bound), median, df[col])

  return df

columns = numerical_columns
df = detect_and_treat_outliers(df,columns)

#checking for outliers after treating them
numerical_columns=df.select_dtypes(include=['float64','int64']).columns

for column in numerical_columns:
    plt.figure(figsize=(10,6))
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

#2.Encoding Categorical Data
label_encoder = LabelEncoder()
df['type of meal'] = label_encoder.fit_transform(df['type of meal'])
df['room type'] = label_encoder.fit_transform(df['room type'])
df['market segment type'] = label_encoder.fit_transform(df['market segment type'])
df['booking status'] = label_encoder.fit_transform(df['market segment type'])
df['Booking_ID'] = label_encoder.fit_transform(df['market segment type'])
df['date of reservation'] = label_encoder.fit_transform(df['market segment type'])

#3.Feature Selection and Data Cleaning



# numerical_columns=df.select_dtypes(include=['int']).columns.tolist()
# scaler=MinMaxScaler()
# df[numerical_columns]=scaler.fit_transform(df[numerical_columns])

#4.Data Splitting
x = df.drop('booking status', axis=1)
y = df['booking status']
x_train , x_test, y_train, y_test = train_test_split(x,y,test_size = .5, random_state = 42)

#5.Model Development and Training
clf = LogisticRegression()
clf = clf.fit(x_train,y_train)
model = clf.predict(x_test)
print('predicted',model)
print()
print('test',y_test)

#6.Model Evaluation
accuracy = accuracy_score(y_test,model)
precision = precision_score(y_test,model, average = 'weighted')
recall = recall_score(y_test,model, average = 'weighted')
f1 = f1_score(y_test,model, average = 'weighted')

conf_matrix = confusion_matrix(y_test,model)
print('accuracy: ',accuracy)
print('precision: ',precision)
print('recall: ',recall)
print('f1: ',f1)
print('conf_matrix: \n',conf_matrix)