# -*- coding: utf-8 -*-
"""LVADSUSR148_DeepakSridharanM_LinearRegression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XQKiytujKGNOFCq29GjZmETO-i5vxjQG
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder,MinMaxScaler
from sklearn.metrics import r2_score, mean_squared_error, accuracy_score
from sklearn.metrics import mean_absolute_error

df = pd.read_csv('/content/expenses.csv')
df.columns.tolist()
df.head()

# 1.Handling Missing Values and Outliers
df.isna().sum()

#univariate analysis
sns.histplot(data=df['bmi'])
plt.show()

bmi_mean=df['bmi'].mean()
df['bmi']=df['bmi'].fillna(bmi_mean)

if df.duplicated().sum()>0:
  df.drop_duplicates(inplace = True)

#outlier detection and treating outliers
numerical_columns=df.select_dtypes(include=['float64','int64']).columns

for column in numerical_columns:
    plt.figure(figsize=(10,6))
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

def detect_and_treat_outliers(df,columns):

  for col in columns:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    #define bounds for outliers
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    #replace outliers with the median of column
    median = df[col].median()
    df[col] = np.where((df[col] < lower_bound) | (df[col] > upper_bound), median, df[col])

  return df

columns = numerical_columns
df = detect_and_treat_outliers(df,columns)

#checking for outliers after treating them
numerical_columns=df.select_dtypes(include=['float64','int64']).columns

for column in numerical_columns:
    plt.figure(figsize=(10,6))
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

#2.Encoding Categorical Data
categorical_columns=df.select_dtypes(include=['object']).columns.tolist()
categorical_columns

encoded_df=pd.get_dummies(df,columns=categorical_columns)
encoded_df=encoded_df.astype(int)

#3.Feature Selection and Data Cleaning
numerical_columns=encoded_df.select_dtypes(include=['int']).columns.tolist()
scaler=MinMaxScaler()
encoded_df[numerical_columns]=scaler.fit_transform(encoded_df[numerical_columns])

#4.Data splitting
X = encoded_df.drop('charges', axis=1)
y = encoded_df['charges']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#5.Model Development and Training
model=LinearRegression()
clf=model.fit(X_train,y_train)

pred = model.predict(X_test)
print('Predicted: ',pred)
print('Test: ',y_test)

#6.Model Evaluation
r2 = r2_score(y_test, pred)
mse=mean_squared_error(y_test,pred)
rmse = np.sqrt(mean_squared_error(y_test,pred))

print("R-squared:", r2)
print("Mean Squared Error",mse)
print("Root Mean Squared Error (RMSE):", rmse)